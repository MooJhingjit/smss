// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  buyer
  vendor
  sale
  seller
  admin
}

model User {
  id               Int             @id @default(autoincrement())
  name             String
  email            String?          @unique
  taxId            String?         
  phone            String?
  address          String?         @db.Text
  contact          String?         @db.Text
  fax              String?
  role             UserRole        @default(buyer)
  password         String?
  isProtected      Boolean         @default(false)
  products         Product[]
  contacts         Contact[]       @relation("seller")
  sellerQuotations Quotation[]     @relation("seller")
  purchaseOrders   PurchaseOrder[] @relation("vendor")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Contact {
  id          Int         @id @default(autoincrement())
  sellerId    Int?
  user        User?       @relation(fields: [sellerId], references: [id], name: "seller")
  name        String
  email       String?     
  taxId       String?     @unique
  branchId    String?     
  phone       String?
  address     String?     @db.Text
  contact     String?     @db.Text
  fax         String?
  isProtected Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  quotation   Quotation[]

  @@index([sellerId])
}

enum ProductType {
  product
  service
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String
  vendor         User            @relation(fields: [vendorId], references: [id])
  vendorId       Int
  description    String?         @db.Text
  cost           Float?
  unit           String?
  percentage     Decimal?
  type           ProductType     @default(product)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  items          Item[]
  QuotationLists QuotationList[]

  @@index([vendorId])
}

enum ItemStatus {
  pending
  available
  sold
  claimed
  lost
}

model Item {
  id                  Int                @id @default(autoincrement())
  productId           Int?
  product             Product?           @relation(fields: [productId], references: [id])
  purchaseOrderItemId Int?
  purchaseOrderItem   PurchaseOrderItem? @relation(fields: [purchaseOrderItemId], references: [id])
  name                String
  description         String?            @db.Text
  serialNumber        String?
  warrantyDate        DateTime?
  cost                Float?
  status              ItemStatus         @default(available)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  QuotationItems      QuotationItem[]

  @@index([productId])
  @@index([purchaseOrderItemId])
}

enum QuotationType {
  product
  service
}

enum QuotationStatus {
  open
  pending_approval
  offer
  approved
  po_preparing
  po_sent
  product_received
  order_preparing
  delivered
  paid
  archived
}

model Quotation {
  id                    Int                      @id @default(autoincrement())
  code                  String
  purchaseOrderRef      String?
  type                  QuotationType            @default(product)
  contactId             Int
  contact               Contact                  @relation(fields: [contactId], references: [id])
  sellerId              Int?
  seller                User?                    @relation(fields: [sellerId], references: [id], name: "seller")
  discount              Float?
  totalPrice            Float?
  grandTotal            Float?
  tax                   Float?
  paymentType           PurchaseOrderPaymentType @default(cash)
  paymentCondition      String?
  paymentDue            DateTime?
  withholdingTax        Float?
  withholdingTaxPercent Float?
  status                QuotationStatus          @default(open)
  remark                String?                  @db.Text
  deliveryPeriod        Int?
  validPricePeriod      Int?
  isLocked              Boolean                  @default(false)
  billGroupId           Int?
  billGroup             BillGroup?               @relation(fields: [billGroupId], references: [id])
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  lists                 QuotationList[]
  purchaseOrders        PurchaseOrder[]
  medias                Media[]
  invoice               Invoice?
  @@index([contactId])
  @@index([sellerId])
}

model QuotationList {
  id                    Int             @id @default(autoincrement())
  quotationId           Int
  quotation             Quotation       @relation(fields: [quotationId], references: [id])
  productId             Int?
  product               Product?        @relation(fields: [productId], references: [id])
  name                  String
  price                 Float?
  unitPrice             Float?
  unit                  String?
  cost                  Float?
  percentage            Float?
  quantity              Int?
  withholdingTax        Float?
  withholdingTaxPercent Float?
  allowedWithholdingTax Boolean?         @default(false)
  discount              Float?
  totalPrice            Float?
  description           String?         @db.Text
  subItems              String?
  groupName             String?
  order                 Int?            @default(0)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  QuotationItems        QuotationItem[]

  @@index([quotationId])
  @@index([productId])
}

model QuotationItem {
  id              Int           @id @default(autoincrement())
  quotationListId Int
  quotationList   QuotationList @relation(fields: [quotationListId], references: [id])
  itemId          Int
  item            Item          @relation(fields: [itemId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([quotationListId])
  @@index([itemId])
}

enum PurchaseOrderStatus {
  draft
  po_sent
  product_received
  paid
}

enum PurchaseOrderPaymentType {
  cash
  credit
}

model PurchaseOrder {
  id                 Int                      @id @default(autoincrement())
  code               String
  quotationId        Int?
  quotation          Quotation?               @relation(fields: [quotationId], references: [id])
  vendorId           Int
  vendor             User                     @relation(fields: [vendorId], references: [id], name: "vendor")
  vendorQtCode       String?
  discount           Float?
  extraCost          Float?
  price              Float?
  totalPrice         Float?
  tax                Float?
  vat                Float?
  grandTotal         Float?
  status             PurchaseOrderStatus      @default(draft)
  paymentType        PurchaseOrderPaymentType @default(cash)
  paymentDue         DateTime?
  deliveryPeriod     Int?
  validPricePeriod   Int?
  remark             String?                  @db.Text
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  purchaseOrderItems PurchaseOrderItem[]
  medias             Media[]

  @@index([quotationId])
  @@index([vendorId])
}

enum PurchaseOrderItemStatus {
  pending
  confirmed
}

model PurchaseOrderItem {
  id                       Int                       @id @default(autoincrement())
  purchaseOrderId          Int
  purchaseOrder            PurchaseOrder             @relation(fields: [purchaseOrderId], references: [id])
  name                     String
  price                    Float?
  unitPrice                Float?
  unit                     String?
  quantity                 Int?
  description              String?                   @db.Text
  type                     ProductType               @default(product)
  status                   PurchaseOrderItemStatus   @default(pending)
  withholdingTaxEnabled    Boolean                   @default(false)
  withholdingTax           Float?
  receiptId                Int?
  purchaseOrderItemReceipt PurchaseOrderItemReceipt? @relation(fields: [receiptId], references: [id])
  items                    Item[]
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt

  @@index([purchaseOrderId])
}

model PurchaseOrderItemReceipt {
  id                 Int                 @id @default(autoincrement())
  purchaseOrderItems PurchaseOrderItem[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
}

model Media {
  id              Int            @id @default(autoincrement())
  name            String
  description     String?        @db.Text
  url             String
  quotationId     Int?
  quotation       Quotation?     @relation(fields: [quotationId], references: [id])
  purchaseOrderId Int?
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())

  @@index([quotationId])
  @@index([purchaseOrderId])
}

model BillGroup {
  id    Int      @id @default(autoincrement())
  code  String?
  date  DateTime?
  invoices Invoice[]
  quotations Quotation[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
}

model Invoice {
  id          Int       @id @default(autoincrement())
  code        String?
  date  DateTime
  receiptCode        String?
  receiptDate  DateTime?
  billGroupId Int
  billGroup   BillGroup @relation(fields: [billGroupId], references: [id])
  quotationId Int @unique
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  grandTotal Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())

  @@index([billGroupId])
  @@index([quotationId])
}

// npx prisma db push
// npx prisma generate
