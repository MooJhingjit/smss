datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  buyer
  vendor
  sale
  admin
}

model User {
  id               Int         @id @default(autoincrement())
  name             String
  email            String      @unique
  taxId            String?     @unique
  phone            String?
  address          String?
  contact          String?
  fax              String?
  role             UserRole    @default(buyer)
  password         String?
  isProtected      Boolean     @default(false)
  products         Product[]
  buyerQuotations  Quotation[] @relation("buyer")
  sellerQuotations Quotation[] @relation("seller")
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String
  vendor         User            @relation(fields: [vendorId], references: [id])
  vendorId       Int
  description    String?
  cost           Float?
  percentage     Decimal?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  items          Item[]
  QuotationLists QuotationList[]
}

enum ItemStatus {
  pending
  available
  sold
  claimed
  lost
}

model Item {
  id            Int             @id @default(autoincrement())
  productId     Int
  product       Product         @relation(fields: [productId], references: [id])
  name          String
  description   String?
  serialNumber  String?
  warrantyDate  DateTime?
  cost          Float?
  status        ItemStatus      @default(available)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  QuotationItem QuotationItem[]
}

enum QuotationType {
  product
  service
}

enum QuotationStatus {
  open
  offer
  approved
  po_preparing
  po_sent
  product_received
  order_preparing
  delivered
}

model Quotation {
  id                    Int             @id @default(autoincrement())
  code                  String
  type                  QuotationType   @default(product)
  buyerId               Int
  buyer                 User            @relation(fields: [buyerId], references: [id], name: "buyer")
  sellerId              Int?
  seller                User?           @relation(fields: [sellerId], references: [id], name: "seller")
  totalDiscount         Float?
  totalPrice            Float?
  totalTax              Float?
  paymentType           String          @default("cash")
  paymentDueDate        DateTime?
  withholdingTax        Float?
  withholdingTaxPercent Float?
  status                QuotationStatus @default(open)
  remark                String?
  lists                 QuotationList[]
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
}

model QuotationList {
  id                    Int             @id @default(autoincrement())
  quotationId           Int
  quotation             Quotation       @relation(fields: [quotationId], references: [id])
  productId             Int
  product               Product         @relation(fields: [productId], references: [id])
  name                  String
  price                 Float?
  unitPrice             Float?
  cost                  Float?
  percentage            Float?
  quantity              Int?
  withholdingTax        Float?
  withholdingTaxPercent Float?
  discount              Float?
  totalPrice            Float?
  description           String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  QuotationItem         QuotationItem[]
}

model QuotationItem {
  id              Int           @id @default(autoincrement())
  quotationListId Int
  quotationList   QuotationList @relation(fields: [quotationListId], references: [id])
  itemId          Int
  item            Item          @relation(fields: [itemId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// npx prisma db push
// npx prisma generate
